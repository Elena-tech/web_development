# 🎨 Lesson 7: CSS Animations & Transitions 🚀  

## 💡 Mission: Learn How to Make Websites More Dynamic with CSS  
**Objective:** Understand how to create **smooth animations & transitions** to enhance the user experience.  

### 🔹 Topics Covered:  
✅ **CSS Transitions (Smooth Effects for Hover & Clicks)**  
✅ **CSS Animations (Moving Objects with `@keyframes`)**  
✅ **Animating with `transform` (Scale, Rotate, Move, Skew)**  
✅ **Combining CSS Animations & JavaScript**  
✅ **Best Practices for Performance Optimization**  

---

## 📖 Part 1: Introduction to CSS Transitions  

🎯 **CSS transitions allow you to animate changes smoothly.**  

🔹 **Basic Syntax:**  
```css
transition: property duration timing-function delay;
```

🔹 **Example: Smooth Background Color Change on Hover**  
```css
button {
  background-color: blue;
  color: white;
  padding: 10px;
  border: none;
  transition: background-color 0.5s ease-in-out;
}

button:hover {
  background-color: red;
}
```

🎯 **Bonus:** Try using `transition: all 0.5s ease-in-out;` to animate all properties!  

---

## 📖 Part 2: Adding Smooth Hover Effects  

🔹 **Example: Scaling an Image on Hover**  
```css
img {
  width: 200px;
  transition: transform 0.3s ease-in-out;
}

img:hover {
  transform: scale(1.2);
}
```

🔹 **Example: Rotating an Icon on Hover**  
```css
.icon {
  transition: transform 0.5s ease;
}

.icon:hover {
  transform: rotate(360deg);
}
```

🎯 **Bonus:** Try **adding a shadow (`box-shadow`) on hover!**  

---

## 📖 Part 3: CSS Animations with `@keyframes`  

🎯 **CSS animations allow elements to change over time.**  

🔹 **Basic Syntax:**  
```css
@keyframes animationName {
  0% { property: value; }
  50% { property: value; }
  100% { property: value; }
}
```

🔹 **Example: Bouncing Ball Animation**  
```css
.ball {
  width: 50px;
  height: 50px;
  background-color: red;
  border-radius: 50%;
  position: relative;
  animation: bounce 2s infinite;
}

@keyframes bounce {
  0%, 100% { top: 0; }
  50% { top: 100px; }
}
```

🎯 **Bonus:** Try using `animation-direction: alternate;` to make it reverse smoothly!  

---

## 📖 Part 4: Animating Text & Buttons  

🔹 **Example: Text Fading In & Out**  
```css
@keyframes fadeInOut {
  0% { opacity: 0; }
  50% { opacity: 1; }
  100% { opacity: 0; }
}

.text {
  animation: fadeInOut 3s infinite;
}
```

🔹 **Example: Pulsing Button Animation**  
```css
@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}

.button {
  background-color: green;
  color: white;
  padding: 10px;
  border: none;
  animation: pulse 1.5s infinite;
}
```

🎯 **Bonus:** Add `hover` effects to pause the animation when hovered!  

---

## 📖 Part 5: Combining CSS Animations & JavaScript  

🎯 **You can trigger CSS animations using JavaScript events.**  

🔹 **Example: Click to Animate a Box**  
```html
<div id="box"></div>
<button onclick="animateBox()">Click Me</button>

<style>
  #box {
    width: 100px;
    height: 100px;
    background-color: blue;
    position: relative;
    transition: transform 1s;
  }
</style>

<script>
  function animateBox() {
    document.getElementById("box").style.transform = "translateX(200px)";
  }
</script>
```

🎯 **Bonus:** Try adding a **reset button** to return the box to its original position!  

---

## 📖 Part 6: Performance Optimization for Animations  

📌 **Follow these best practices to keep animations smooth:**  
✅ **Use `transform` and `opacity` instead of `top`, `left`, `width`, `height`** for better performance.  
✅ **Use `will-change: transform;` on elements that will animate frequently.**  
✅ **Limit the use of heavy box shadows & blurs** (they slow down rendering).  
✅ **Avoid animating too many elements at the same time**.  

🎯 **Bonus:** Use **CSS `prefers-reduced-motion`** to disable animations for users who prefer minimal motion.  
```css
@media (prefers-reduced-motion: reduce) {
  * {
    animation: none !important;
    transition: none !important;
  }
}
```

---

## 🛠️ Lab Challenge: Create an Animated Landing Page  

📌 **Task:** Create a landing page with:  
✅ **A heading that fades in**  
✅ **A button that changes size on hover**  
✅ **A background that slides in from the side**  

🔹 **Example HTML**  
```html
<header class="hero">
  <h1 class="title">Welcome to My Website</h1>
  <button class="cta">Get Started</button>
</header>
```

🔹 **Example CSS**  
```css
.hero {
  background-color: blue;
  padding: 50px;
  text-align: center;
  animation: slideIn 1s ease-in-out;
}

@keyframes slideIn {
  from { transform: translateY(-100px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

.cta {
  background-color: yellow;
  padding: 10px;
  font-size: 20px;
  transition: transform 0.3s ease-in-out;
}

.cta:hover {
  transform: scale(1.1);
}
```

🎯 **Bonus:** Add a **looping animation to make elements float slightly!**  

---

## 🎒 Homework & Next Steps  
✅ **Create a webpage with at least 3 animations.**  
✅ **Experiment with `@keyframes`, `transition`, and `transform`.**  
✅ **Use JavaScript to trigger an animation on button click.**  

📢 **Next Lesson:** **Lesson 8: SEO, Performance & Web Hosting!** 🚀  

---

## 🛠️ Additional Resources  

📌 **CSS Animations Guide (MDN Docs)**  
🔗 [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations)  

📌 **CSS Transitions Guide (CSS-Tricks)**  
🔗 [https://css-tricks.com/almanac/properties/t/transition/](https://css-tricks.com/almanac/properties/t/transition/)  

📌 **Animation Performance Optimization**  
🔗 [https://developers.google.com/web/fundamentals/performance/rendering/](https://developers.google.com/web/fundamentals/performance/rendering/)  

---

# 🎉 Lesson Wrap-Up  
✅ We learned **how to create smooth animations & transitions with CSS**.  
✅ We explored **`@keyframes`, `transform`, and hover effects**.  
✅ We prepared for **SEO & performance optimization in the next lesson**.  
